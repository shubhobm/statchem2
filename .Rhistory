dim(x1)
dim(x2)
## neural net
require(gam)
require(DMwR)
require(randomForest)
require(mgcv)
## choose best perc.under for SMOTEing
nrep = 10
perc.vec = 11:50
auc.vec = rep(0, length(perc.vec))
fit.nm <- randomForest(log(NumMosquitos) ~ ., data = x1[,-1],
na.action = na.omit, corr.bias=TRUE, nodesize=1, replace=T, ntree=1e2)
p.nm = predict(fit.nm, newdata=x2)
sqrt(median((x2$NumMosquitos - exp(p.nm))^2, na.rm=T))
x1$eNumMosquitos = log(x1$NumMosquitos)
x2$eNumMosquitos = p.nm
hist(x1$eNumMosquitos, freq=F)
lines(density(predict(fit.nm, x1), na.rm=T), lwd=2, lty=2)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos) + ResultSpeed + PrecipTotal
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos)
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
varImpPlot(fit.nm)
fit.nm
rm(list=ls())
setwd("C:/Study/My projects/Kaggle-mosquito/codes")
library(Metrics)
#library(h2o)
#h2oServer <- h2o.init()   ##we'd like to try this, but does not initialize
library(data.table)   ## load data in quickly with fread
x <- fread("../input/train.csv")
test <- fread("../input/test.csv")
weather = fread("../input/weather.csv")
## prep the species column by moving the test-only UNSPECIFIED CULEX to CULEX ERRATICUS, and re-doing the levels
## logistic regression will complain otherwise
vSpecies<-c(as.character(x$Species),as.character(test$Species))
vSpecies[vSpecies=="UNSPECIFIED CULEX"]<-"CULEX ERRATICUS"
vSpecies[-which(vSpecies == "CULEX PIPIENS" |
vSpecies == "CULEX PIPIENS/RESTUANS" |
vSpecies == "CULEX RESTUANS")] = "CULEX OTHER"
vSpecies<-factor(vSpecies,levels=unique(vSpecies))
## data.table syntax for adding a column; could overwrite the existing column as well
x[,Species2:=factor(vSpecies[1:nrow(x)],levels=unique(vSpecies))]
test[,Species2:=factor(vSpecies[(nrow(x)+1):length(vSpecies)],levels=unique(vSpecies))]
## also add some fields for components of the date using simple substrings
x[,dMonth:=as.factor(paste(substr(x$Date,6,7)))]
x[,dYear:=as.factor(paste(substr(x$Date,1,4)))]
x$Date = as.Date(x$Date, format="%Y-%m-%d")
xsDate = as.Date(paste0(x$dYear, "0101"), format="%Y%m%d")
x$dWeek = as.numeric(paste(floor((x$Date - xsDate + 1)/7)))
test[,dMonth:=as.factor(paste(substr(test$Date,6,7)))]
test[,dYear:=as.factor(paste(substr(test$Date,1,4)))]
test$Date = as.Date(test$Date, format="%Y-%m-%d")
tsDate = as.Date(paste0(test$dYear, "0101"), format="%Y%m%d")
test$dWeek = as.numeric(paste(floor((test$Date - tsDate + 1)/7)))
## remove duplicates and merge
# x$DateTrapSpecies = with(x, paste0(Date, Trap, Species2))
# test$DateTrapSpecies = with(test, paste0(Date, Trap, Species2))
#
# NumMosquitosAdded = aggregate(NumMosquitos~DateTrapSpecies, data=x, FUN=sum)
# x$NumMosquitos = NULL
#
# x = merge(x, NumMosquitosAdded, by="DateTrapSpecies")
# x = x[!duplicated(x),]
## new features: prevalence at same block, historic detection prob at trap
weather$Date = as.Date(weather$Date, format="%Y-%m-%d")
weather$PrecipTotal[which(weather$PrecipTotal=="  T")] = "0.00"
## add weather
weather = data.frame(weather)
goodcols = c(3:5, 7:10 ,17:22)
for(i in goodcols){
weather[,i] = as.numeric(weather[,i])
}
w1 = aggregate(weather[,goodcols], by=list(Date=weather$Date), FUN=mean, na.action=na.omit)
x = merge(x, w1, by="Date")
test = merge(test, w1, by="Date")
save(x, test, file="mosha.Rda")
## Lagged week
# weather$dYear = as.numeric(paste(substr(weather$Date,1,4)))
# wsDate = as.Date(paste0(weather$dYear, "0101"), format="%Y%m%d")
# weather$dWeek = as.numeric(paste(floor((weather$Date - wsDate + 1)/7)))
# weather = data.frame(weather)
# goodcols = c(3:5, 7:10 ,17:22)
# for(i in goodcols){
#   weather[,i] = as.numeric(weather[,i])
# }
#
# w1 = aggregate(weather[,goodcols], by=list(Year=weather$dYear, Week=weather$dWeek), FUN=mean, na.action=na.omit)
# x$YearWeek = with(x, paste(dYear,dWeek))
# w1$YearWeek = with(w1, paste(Year,Week+4))
# test$YearWeek = with(test, paste(dYear,dWeek))
#
# x = merge(x, w1, by="YearWeek")
# test = merge(test, w1, by="YearWeek")
# save(x, test, file="mosha.Rda")
rm(list=ls())
setwd("C:/Study/My projects/Kaggle-mosquito/codes")
library(Metrics)
library(data.table)   ## load data in quickly with fread
# x <- fread("../input/train.csv")
# test <- fread("../input/test.csv")
load('mosha.Rda')
## glance at some conditional probabilities
x[,mean(WnvPresent),by="Species"][order(V1)]  ##glance at average by species
x[,mean(WnvPresent),by="Block"][order(V1)]  ##glance at average by block
x[,mean(WnvPresent),by="dMonth"][order(V1)]  ##glance at average by month of year
x$WnvPresent = as.factor(x$WnvPresent)
### Start modeling
## use 2011 as a cross validation year; x1 will include the other three years; x2 will include 2011
my.x = data.frame(x[,list(WnvPresent, NumMosquitos,
dWeek, Species2, Latitude, Longitude,
Tmax, Tmin, Tavg, Heat, Cool,
DewPoint, WetBulb, StnPressure, SeaLevel,
ResultSpeed, ResultDir, AvgSpeed, PrecipTotal)])
# my.x = my.x[which(my.x$NumMosquitos < 50),]
#my.x[,-c(1:2)] = scale(my.x[,-c(1:2)])
x1<-my.x[x$dYear!=2011,]
x2<-my.x[x$dYear==2011,]
## check sizes of split frames
dim(x1)
dim(x2)
## neural net
require(gam)
require(DMwR)
require(randomForest)
require(mgcv)
## choose best perc.under for SMOTEing
nrep = 10
perc.vec = 11:50
auc.vec = rep(0, length(perc.vec))
fit.nm <- randomForest(log(NumMosquitos) ~ ., data = x1[,-1],
na.action = na.omit, corr.bias=TRUE, nodesize=1, replace=T, ntree=1e2)
p.nm = predict(fit.nm, newdata=x2)
sqrt(median((x2$NumMosquitos - exp(p.nm))^2, na.rm=T))
x1$eNumMosquitos = log(x1$NumMosquitos)
x2$eNumMosquitos = p.nm
hist(x1$eNumMosquitos, freq=F)
lines(density(predict(fit.nm, x1), na.rm=T), lwd=2, lty=2)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos)
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos) + ResultDir
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos) + ResultDir + PrecipTotal
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos) + PrecipTotal
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos) + ResultDir + PrecipTotal
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
rm(list=ls())
setwd("C:/Study/My projects/Kaggle-mosquito/codes")
library(Metrics)
library(data.table)   ## load data in quickly with fread
# x <- fread("../input/train.csv")
# test <- fread("../input/test.csv")
load('mosha.Rda')
## glance at some conditional probabilities
x[,mean(WnvPresent),by="Species"][order(V1)]  ##glance at average by species
x[,mean(WnvPresent),by="Block"][order(V1)]  ##glance at average by block
x[,mean(WnvPresent),by="dMonth"][order(V1)]  ##glance at average by month of year
x$WnvPresent = as.factor(x$WnvPresent)
### Start modeling
## use 2011 as a cross validation year; x1 will include the other three years; x2 will include 2011
my.x = data.frame(x[,list(WnvPresent, NumMosquitos,
dWeek, Species2, Latitude, Longitude,
Tmax, Tmin, Tavg, Heat, Cool,
DewPoint, WetBulb, StnPressure, SeaLevel,
ResultSpeed, ResultDir, AvgSpeed, PrecipTotal)])
# my.x = my.x[which(my.x$NumMosquitos < 50),]
#my.x[,-c(1:2)] = scale(my.x[,-c(1:2)])
x1<-my.x[x$dYear!=2011,]
x2<-my.x[x$dYear==2011,]
## check sizes of split frames
dim(x1)
dim(x2)
## neural net
require(gam)
require(DMwR)
require(randomForest)
require(mgcv)
## choose best perc.under for SMOTEing
nrep = 10
perc.vec = 11:50
auc.vec = rep(0, length(perc.vec))
fit.nm <- randomForest(log(NumMosquitos) ~ ., data = x1[,-1],
na.action = na.omit, corr.bias=TRUE, nodesize=1, replace=T, ntree=1e3)
p.nm = predict(fit.nm, newdata=x2)
sqrt(median((x2$NumMosquitos - exp(p.nm))^2, na.rm=T))
x1$eNumMosquitos = log(x1$NumMosquitos)
x2$eNumMosquitos = p.nm
## check prediction plot
hist(x1$eNumMosquitos, freq=F)
lines(density(predict(fit.nm, x1), na.rm=T), lwd=2, lty=2)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos) + ResultDir + PrecipTotal
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
fit.nm
fit.nm.full <- update(fit.nm, data=my.x[,-1])
my.x$eNumMosquitos = log(my.x$NumMosquitos)
test$eNumMosquitos = predict(fit.nm.full, newdata = test)
fitSubmit <- update(fitCv.enm, data=my.x)
pSubmit<-predict(fitSubmit, newdata = test, type = "response")
## look at the predicted distribution (AUC doesn't care about probabilities; just ordering. It's still a good diagnostic)
summary(pSubmit)
submissionFile<-cbind(test$Id,pSubmit)
colnames(submissionFile)<-c("Id","WnvPresent")
options("scipen"=100, "digits"=8)
write.csv(submissionFile,"GAM6_eNumMosRF_day4.csv",row.names=FALSE,quote=FALSE)
fit.nm.full
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(NumMosquitos) + ResultDir + PrecipTotal
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(log(NumMosquitos)) + ResultDir + PrecipTotal
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
formula.gam = WnvPresent ~ s(dWeek) + Species2 + lo(Latitude, Longitude) + s(eNumMosquitos) + ResultDir + PrecipTotal
fitCv.enm = gam(formula.gam, data = x1, family="binomial")
p2.nm <- predict(fitCv.enm, newdata = x2, type = "response")
auc(x2$WnvPresent,p2.nm)
load("C:/Users/Subho/Documents/GitHub/statchem2/lta98.rda")
setwd("C:/Users/Subho/Documents/GitHub/statchem2")
source("./Codes/supSVD_functions.R")
## load 508 data
data508 = read.table("data508.txt", header=T)
p = ncol(data508)
X = logt(as.matrix(data508[-1,-c(1,p)]))
Y = as.matrix(data508[-1,p])
vartype = as.factor(as.matrix(data508[1,-c(1,p)]))
pch508 = ifelse(Y==0, 1, 8)
Xts = X[,vartype==1]
svd508 = svd(Xts)
tX508 = scale(Xts) %*% svd508$v
## load 95 data
lta98 = read.csv("lta98.csv", header=T)
minus = c(1,194,195,196)
X = logt(as.matrix(lta98[-1,-minus]))
Y = as.matrix(lta98[-1,195])>0
vartype = as.factor(as.matrix(lta98[1,-minus]))
pch98 = ifelse(Y==0, 1, 8)
Xts = X[,vartype==1]
svd98 = svd(Xts)
tX98 = scale(Xts) %*% svd98$v
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
pdf("printsPerfectly.pdf")
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=6*pch508, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=6*pch98, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=6*pch508, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=6*pch98, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], 6*pch=pch508, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], 6*pch=pch98, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
pdf("printsPerfectly.pdf", width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=6*pch508, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=6*pch98, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=6*pch508, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=6*pch98, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=6*pch508, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=6*pch98, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
?pdf
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=6*pch508, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=6*pch98, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=6*pch508, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=6*pch98, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=6*pch508, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=6*pch98, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
?plot
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=10*pch508, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=10*pch98, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=10*pch508, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=10*pch98, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=10*pch508, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=10*pch98, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, cex=6, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=6, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=6, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=6, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=6, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=6, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, cex=3, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=3, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=3, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=3, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=3, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=3, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, cex=2, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=2, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=2, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=2, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=2, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=2, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
?xlab
?title
par(cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5))
defPar = par()
par(cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
par(defPar)
defPar = par()
par(cex=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
par(defPar)
defPar = par()
par(cex=1.5, cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2)
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
par(mfrow=c(1,1))
dev.off()
par(defPar)
par()
defPar = par()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(cex=1.5, cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2, mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
dev.off()
par(defPar)
defPar = par()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(cex=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, mfrow=c(3,2))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
dev.off()
par(defPar)
?mar
defPar = par()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(cex=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, mfrow=c(3,2), mar=c(1,1,1,1))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
dev.off()
par(defPar)
defPar = par()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(cex=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, mfrow=c(3,2), mar=c(4,4,4,4))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
dev.off()
par(defPar)
defPar = par()
png('printsGreat.png', width = 8.5, height = 11, units = 'in', res = 300)
par(cex=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, mfrow=c(3,2), mar=rep(5,4))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
dev.off()
par(defPar)
?eps
?postscript
defPar = par()
pdf('printsGreat.pdf', width = 8.5, height = 11)
par(cex=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, mfrow=c(3,2), mar=rep(5,4))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
dev.off()
par(defPar)
defPar = par()
pdf('printsGreat.pdf', width = 8.5, height = 11)
par(cex=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, mfrow=c(3,2), mar=rep(5,4))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
dev.off()
par(defPar)
defPar = par()
pdf('printsGreat.pdf', width = 8.5, height = 11)
par(cex=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=2, cex.sub=1.5, mfrow=c(3,2), mar=rep(5,4))
plot(tX508[,1], tX508[,2], pch=pch508, cex=1.5, xlab="PC1", ylab="PC2",
main="508 mutagen data")
plot(tX98[,1], tX98[,2], pch=pch98, cex=1.5, xlab="PC1", ylab="PC2",
main="95 amine data")
plot(tX508[,2], tX508[,3], pch=pch508, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX98[,2], tX98[,3], pch=pch98, cex=1.5, xlab="PC2", ylab="PC3")
plot(tX508[,1], tX508[,3], pch=pch508, cex=1.5, xlab="PC1", ylab="PC3")
plot(tX98[,1], tX98[,3], pch=pch98, cex=1.5, xlab="PC1", ylab="PC3")
dev.off()
par(defPar)
?pdf
