rber1.post(y=y, s=1)
rber1.post = function(y,s,ns=1e4,plot=TRUE){
n=length(y); sn=sum(y)
p.list = rep(.5,ns)
accept=0
for(r in 2:ns){
# updating 1st coord
p=p.list[r-1]
p1 = rnorm(1, mean=p, sd=s)
alpha = min(1, f(n,sn,p1)/f(n,sn,p))
if(runif(1)<alpha)
{p.list[r] = p1; accept=accept+1}
else
p.list[r] = p
}
if(plot){
plot.ts(p.list)
legend("topleft",legend=paste("sigma=",s,", acceptance rate=",signif(accept/(ns-1),3)))
acf(p.list)
}
}
rber1.post(y=y, s=.1)
rber1.post(y=y, s=.5)
rber1.post(y=y, s=1)
y = rbinom(n, size=1, prob=p)
rber1.post(y=y, s=.1)
rber1.post(y=y, s=.5)
rber1.post(y=y, s=1)
rber1.post = function(y,s,ns=1e4,plot=TRUE){
n=length(y); sn=sum(y)
p.list = rep(.5,ns)
accept=0
for(r in 2:ns){
# updating 1st coord
p=p.list[r-1]
p1 = rnorm(1, mean=p, sd=s)
alpha = min(1, f(n,sn,p1)/f(n,sn,p))
if(runif(1)<alpha)
{p.list[r] = p1; accept=accept+1}
else
p.list[r] = p
}
if(plot){
plot.ts(p.list)
legend("topleft",legend=paste("sigma=",s,", acceptance rate=",signif(accept/(ns-1),3)))
acf(p.list,main=paste("sigma=",s))
}
}
rber1.post(y=y, s=.1)
rber1.post(y=y, s=.5)
rber1.post(y=y, s=1)
?rlnorm
igden=function(x, alpha,beta)
{
val=beta^alpha * x^(-alpha-1) *exp(-beta/x)/gamma(alpha)
return(val)
}
# function for the hastings ratios
prodf2 = function(x,u,v,beta){
uvec=c()
for(i in 1:n)
uvec = c(uvec,rep(u[i],T[i]))
uvec = matrix(uvec,ncol=1)
p = 1-1/(1+exp(x%*%beta+uvec))
prodf = sum(dbinom(y, size=1, prob=p, log=TRUE)) - sum(u^2)/(2*v)
return(prodf)
}
prodf3 = function(x,u,vB,beta){
uvec=c()
for(i in 1:n)
uvec = c(uvec,rep(u[i],T[i]))
uvec = matrix(uvec,ncol=1)
p = 1-1/(1+exp(x%*%beta+uvec))
prodf = sum(dbinom(y, size=1, prob=p, log=TRUE)) - sum(beta^2)/(2*vB)
return(prodf)
}
# setting initial parameters
set.seed(805404)
a0 = 2
b0 = 1
vB = 3
n = 100
#### function for posterior simulation
rber.post = function(ns, x, y, T, a0, b0, vB){
p=ncol(x); n=length(T)
v.list = rep(1,ns)
u.list = matrix(rnorm(n*ns, mean=0, sd=1),ncol=n)
beta.list = matrix(rnorm(p*ns, mean=0, sd=1),ncol=p)
for(r in 2:ns){
v = v.list[r-1]; u = u.list[r-1,]; beta = beta.list[r-1,]
## update v
v1 = rlnorm(1, meanlog=log(v)-.5,sdlog=1)
alpha1 = min(1,igden(v1,a0+n/2,b0+sum(u^2)/2)/igden(v,a0+n/2,b0+sum(u^2)/2))
if(runif(1)<alpha1)
v.list[r] = v1
else
v.list[r] = v
# update U
u1 = u+rnorm(n)*sqrt(v)
#u1 = u+(runif(n)-.5)*sqrt(v)
logalpha2 = min(0,prodf2(x,u1,v,beta)-prodf2(x,u,v,beta))
if(log(runif(1)) < logalpha2)
u.list[r,] = u1
else
u.list[r,] = u
# update beta
beta1 = beta+rnorm(p)*sqrt(vB)
#beta1 = beta+(runif(p)-.5)*sqrt(vB)
logalpha3 = min(0,prodf3(x,u,vB,beta1)-prodf3(x,u,vB,beta))
if(log(runif(1)) < logalpha3)
beta.list[r,] = beta1
else
beta.list[r,] = beta
}
return(list(v.list=v.list, u.list=u.list, beta.list=beta.list))
}
n=100; p=3; T=rep(20,n); N=sum(T)
# construct x
X = matrix(rep(0,3*N),ncol=3)
X[,1] = 1
X[,2] = rnorm(N, mean=.1, sd=1)
X[,3] = rnorm(N, mean=1, sd=sqrt(2))
# construct y
beta = rbind(0,1,-.2)
u = rnorm(n,mean=0, sd=sqrt(2.89))
uvec=c()
for(i in 1:n)
uvec = c(uvec,rep(u[i],T[i]))
p=1-1/(1+exp(X%*%beta+uvec))
y=p
for(i in 1:N)
y[i] = ifelse(runif(1)<p[i],1,0)
psample = rber.post(ns=10000, x=X, y=y, T=T, vB=100, a0=1.01, b0=1.01)
plot.ts(psample$v.list)
plot.ts(psample$beta.list)
?acf
acf(psample$v.list)
psample = rber.post(ns=10000, x=X, y=y, T=T, vB=5, a0=2, b0=3)
acf(psample$v.list)
plot.ts(psample$beta.list)
rber.post = function(ns, x, y, T, a0, b0, vB){
p=ncol(x); n=length(T)
v.list = rep(1,ns)
u.list = matrix(rnorm(n*ns, mean=0, sd=1),ncol=n)
beta.list = matrix(rnorm(p*ns, mean=0, sd=1),ncol=p)
for(r in 2:ns){
v = v.list[r-1]; u = u.list[r-1,]; beta = beta.list[r-1,]
## update v
v1 = rlnorm(1, meanlog=log(v)-.5,sdlog=1)
r1 = igden(v1,a0+n/2,b0+sum(u^2)/2)/dlnorm(v1,meanlog=log(v)-.5,sdlog=1)
r0 = igden(v,a0+n/2,b0+sum(u^2)/2)/dlnorm(v,meanlog=log(v1)-.5,sdlog=1)
alpha1 = min(1,r1/r0)
if(runif(1)<alpha1)
v.list[r] = v1
else
v.list[r] = v
# update U
u1 = u+rnorm(n)*sqrt(v)
#u1 = u+(runif(n)-.5)*sqrt(v)
logalpha2 = min(0,prodf2(x,u1,v,beta)-prodf2(x,u,v,beta))
if(log(runif(1)) < logalpha2)
u.list[r,] = u1
else
u.list[r,] = u
# update beta
beta1 = beta+rnorm(p)*sqrt(vB)
#beta1 = beta+(runif(p)-.5)*sqrt(vB)
logalpha3 = min(0,prodf3(x,u,vB,beta1)-prodf3(x,u,vB,beta))
if(log(runif(1)) < logalpha3)
beta.list[r,] = beta1
else
beta.list[r,] = beta
}
return(list(v.list=v.list, u.list=u.list, beta.list=beta.list))
}
psample = rber.post(ns=10000, x=X, y=y, T=T, vB=100, a0=1.01, b0=1.01)
acf(psample$v.list)
plot.ts(psample$beta.list)
plot.ts(psample$v.list)
rber.post = function(ns, x, y, T, a0, b0, vB){
p=ncol(x); n=length(T)
v.list = rep(1,ns)
u.list = matrix(rnorm(n*ns, mean=0, sd=1),ncol=n)
beta.list = matrix(rnorm(p*ns, mean=0, sd=1),ncol=p)
for(r in 2:ns){
v = v.list[r-1]; u = u.list[r-1,]; beta = beta.list[r-1,]
## update v
v1 = rlnorm(1, meanlog=log(v)-.5,sdlog=1)
r1 = igden(v1,a0+n/2,b0+sum(u^2)/2)/dlnorm(v1,meanlog=log(v)-.5,sdlog=1)
r0 = igden(v,a0+n/2,b0+sum(u^2)/2)/dlnorm(v,meanlog=log(v1)-.5,sdlog=1)
alpha1 = min(1,r1/r0)
if(runif(1)<alpha1)
v.list[r] = v1
else
v.list[r] = v
# update U
u1 = u+rnorm(n)*sqrt(1)
#u1 = u+(runif(n)-.5)*sqrt(v)
logalpha2 = min(0,prodf2(x,u1,v,beta)-prodf2(x,u,v,beta))
if(log(runif(1)) < logalpha2)
u.list[r,] = u1
else
u.list[r,] = u
# update beta
beta1 = beta+rnorm(p)*sqrt(vB)
#beta1 = beta+(runif(p)-.5)*sqrt(vB)
logalpha3 = min(0,prodf3(x,u,vB,beta1)-prodf3(x,u,vB,beta))
if(log(runif(1)) < logalpha3)
beta.list[r,] = beta1
else
beta.list[r,] = beta
}
return(list(v.list=v.list, u.list=u.list, beta.list=beta.list))
}
psample = rber.post(ns=10000, x=X, y=y, T=T, vB=100, a0=1.01, b0=1.01)
plot.ts(psample$v.list)
rber.post = function(ns, x, y, T, a0, b0, vB){
p=ncol(x); n=length(T)
v.list = rep(1,ns)
u.list = matrix(rnorm(n*ns, mean=0, sd=1),ncol=n)
beta.list = matrix(rnorm(p*ns, mean=0, sd=1),ncol=p)
for(r in 2:ns){
v = v.list[r-1]; u = u.list[r-1,]; beta = beta.list[r-1,]
## update v
v1 = rlnorm(1, meanlog=log(v)-.5,sdlog=1)
r1 = igden(v1,a0+n/2,b0+sum(u^2)/2)/dlnorm(v1,meanlog=log(v)-.5,sdlog=1)
r0 = igden(v,a0+n/2,b0+sum(u^2)/2)/dlnorm(v,meanlog=log(v1)-.5,sdlog=1)
alpha1 = min(1,r1/r0)
if(runif(1)<alpha1)
v.list[r] = v1
else
v.list[r] = v
# update U
u1 = u+rnorm(n)*sqrt(v)
#u1 = u+(runif(n)-.5)*sqrt(v)
logalpha2 = min(0,prodf2(x,u1,v,beta)-prodf2(x,u,v,beta))
if(log(runif(1)) < logalpha2)
u.list[r,] = u1
else
u.list[r,] = u
# update beta
beta1 = beta+rnorm(p)*sqrt(vB)
#beta1 = beta+(runif(p)-.5)*sqrt(vB)
logalpha3 = min(0,prodf3(x,u,vB,beta1)-prodf3(x,u,vB,beta))
if(log(runif(1)) < logalpha3)
beta.list[r,] = beta1
else
beta.list[r,] = beta
}
return(list(v.list=v.list, u.list=u.list, beta.list=beta.list))
}
psample = rber.post(ns=10000, x=X, y=y, T=T, vB=100, a0=1.01, b0=1.01)
plot.ts(psample$v.list)
plot.ts(psample$beta.list)
acf(psample$v.list)
plot.ts(psample$beta.list)
bmeans = rep(0,100)
beta2 = psample$b.list[,2]
for(i in 1:100)
bmeans[i] = beta2[100*(i-1)+1:100*i])
bmeans = rep(0,100)
beta2 = psample$b.list[,2]
for(i in 1:100)
bmeans[i] = beta2[100*(i-1)+1:100*i]
View(beta2)
beta2 = psample$beta.list[,2]
for(i in 1:100)
bmeans[i] = beta2[100*(i-1)+1:100*i]
View(psample$beta.list)
bmeans = rep(0,100)
beta2 = psample$beta.list[,2]
for(i in 1:100)
bmeans[i] = mean(beta2[100*(i-1)+1:100*i])
bmeans
plot.ts(psample$beta.list)
beta2
max(beta)
max(beta2)
min(beta2)
bmeans = rep(0,100)
beta2 = psample$beta.list[,2]
for(i in 1:100)
bmeans[i] = mean(beta2[100*(i-1)+1:100*i])
bmeans
for(i in 1:100){
bmeans[i] = mean(beta2[100*(i-1)+1:100*i])
cat(mean(beta2[100*(i-1)+1:100*i]))
}
bmeans = rep(0,100)
beta2 = psample$beta.list[,2]
for(i in 1:100){
bmeans[i] = mean(beta2[100*(i-1)+1:100*i])
cat(mean(beta2[100*(i-1)+1:100*i]),"\n")
}
beta2 = psample$beta.list[,2]
for(i in 1:100){
bmeans[i] = mean(beta2[100*(i-1)+1:100*i])
cat(mean(beta2[100*(i-1)+1:100*i]),max(beta2[100*(i-1)+1:100*i]),"\n")
}
beta2 = psample$beta.list[,2]
for(i in 1:100){
bmeans[i] = mean(beta2[100*(i-1)+1:100*i])
cat(i,mean(beta2[100*(i-1)+1:100*i]),max(beta2[100*(i-1)+1:100*i]),"\n")
}
i=51
mean(beta2[100*(i-1)+1:100*i])
beta2[100*(i-1)+1:100*i]
i=52
beta2[100*(i-1)+1:100*i]
i=53
beta2[100*(i-1)+1:100*i]
i=54
beta2[100*(i-1)+1:100*i]
beta2[5300]
beta2[5399]
beta2[5350]
length(beta2)
bmeans = rep(0,100)
beta2 = psample$beta.list[,2]
for(i in 1:100){
bmeans[i] = mean(beta2[(100*(i-1)+1):100*i])
cat(i,mean(beta2[100*(i-1)+1:100*i]),max(beta2[100*(i-1)+1:100*i]),"\n")
}
bmeans
bmeans = rep(0,100)
beta2 = psample$beta.list[,2]
for(i in 1:100){
bmeans[i] = mean(beta2[(100*(i-1)+1):100*i])
cat(i,mean(beta2[100*(i-1)+1:100*i]),"\n")
}
bmeans
i
i=56
(100*(i-1)+1)
(100*(i))
beta2[5501:5600]
mean(beta2[5501:5600])
mean(beta2[(100*(i-1)+1):100*i])
i
(100*(i-1)+1)
100*i
bmeans = rep(0,100)
beta2 = psample$beta.list[,2]
for(i in 1:100){
l=100*(i-1)+1; r=100*i
bmeans[i] = mean(beta2[l:r])
cat(i,mean(beta2[100*(i-1)+1:100*i]),"\n")
}
bmeans
bmeans = rep(0,100)
beta2 = psample$beta.list[,2]
for(i in 1:100){
l=100*(i-1)+1; r=100*i
bmeans[i] = mean(beta2[l:r])
cat(i,mean(beta2[100*(i-1)+1:100*i]),"\n")
}
bmeans
bmeans = rep(0,100)
beta2 = psample$beta.list[,2]
for(i in 1:100){
l=100*(i-1)+1; r=100*i
bmeans[i] = mean(beta2[l:r])
cat(i,mean(beta2[l:r]),"\n")
}
bmeans
sd(bmeans)/sqrt(100)
mean(bmeans)
psample = rber.post(ns=10000, x=X, y=y, T=T, vB=5, a0=2, b0=3)
plot.ts(psample$v.list)
acf(psample$v.list)
plot.ts(psample$beta.list)
acf(psample$v.list)
psample = rber.post(ns=10000, x=X, y=y, T=T, vB=5, a0=2, b0=3)
plot.ts(psample$v.list)
par(mfrow=c(1,1))
acf(psample$v.list)
plot.ts(psample$beta.list)
plot.ts(psample$v.list)
par(mfrow=c(1,1))
acf(psample$v.list)
plot.ts(psample$beta.list)
install.packages("doMC")
install.packages("rpanel")
library(rpanel)
install.packages("rpanel")
install.packages("rpanel")
load("C:/Users/Subho/Documents/GitHub/statchem2/lta98.rda")
# load('lta98.rda')
View(lta98)
View(lta98$ltaTS)
dim(lta98$ltaTS)
lmTS = lm(Y~. data=ltaTS)
lmTS = lm(Y~., data=ltaTS)
lmTS = lm(Y~., data=lta98$ltaTS)
attach(lta98)
ltaTS=cbind(Y,ltaTS)
lmTS = lm(Y~., data=lta98$ltaTS)
plot(lmTS)
im(ltaTS)
dim(ltaTS)
load('lta98.rda')
load("C:/Users/Subho/Documents/GitHub/statchem2/lta98.rda")
attach(lta98)
ltaTS=cbind(Y,ltaTS)
lmTS = lm(Y~., data=lta98$ltaTS)
pcaTs = princomp(ltaTS[,-1])
setwd("C:/Users/Subho/Documents/GitHub/statchem2")
source('supSVD_functions.R')
attach(lta98)
modTS = supSVD(X=scale(ltaTS), Y=Y, r=5, quiet=F)
class(ltaTS[,1])
names(ltaTS)
rm(list=ls())
setwd("C:/Users/Subho/Documents/GitHub/statchem2")
source('supSVD_functions.R')
load('lta98.rda')
attach(lta98)
modTS = supSVD(X=scale(ltaTS), Y=Y, r=5, quiet=F)
names(ltaTS)
scale(ltaTS[,1])
scale(ltaTS[,2])
ffu=lapply(ltaTS,class)
which(ffu!="numeric")
lta98$SMILES
names(ltaTS)
ltaTS$SMILES
scaler(ltsTC)
scale(ltsTC)
scale(ltaTC)
scale(lta3D)
scale(ltaQC)
scale(ltaTS)
rm(list=ls())
setwd("C:/Users/Subho/Documents/GitHub/statchem2")
lta98 = read.csv("lta98.csv", header=T)
cats = factor(as.numeric(lta98[1,]))
lta = lta98[,which(cats!=0)]
Y = lta98[,which(colnames(lta98)=='ACT')]
## separate different variable types
ltaTS = lta98[,which(cats==1)]
SMILES = ltaTS$SMILES
ltaTS = ltaTS[,-which(colnames(ltaTS)=="SMILES")]
DIM(ltaTS)
dim(ltaTS)
rm(list=ls())
setwd("C:/Users/Subho/Documents/GitHub/statchem2")
lta98 = read.csv("lta98.csv", header=T)
## separating variable categories
cats = factor(as.numeric(lta98[1,]))
lta = lta98[,which(cats!=0)]
Y = lta98[,which(colnames(lta98)=='ACT')]
## separate different variable types
ltaTS = lta98[,which(cats==1)]
SMILES = ltaTS$SMILES
ltaTS = ltaTS[,-which(colnames(ltaTS)=="SMILES")]
ltaTC = lta98[,which(cats==2)]
lta3D = lta98[,which(cats==3)]
ltaQC = lta98[,which(cats==4)]
lta98 = list(Y=Y,SMILES=SMILES, ltaTS=ltaTS,ltaTC=ltaTC,lta3D=lta3D,ltaQC=ltaQC)
save(lta98, file='lta98.rda')
rm(list=ls())
setwd("C:/Users/Subho/Documents/GitHub/statchem2")
source('supSVD_functions.R')
## Load data
load('lta98.rda')
attach(lta98)
modTS = supSVD(X=scale(ltaTS), Y=Y, r=5, quiet=F)
scale(ltaTS)
modTS = supSVD(X=scale(ltaTS), Y=Y, r=5, quiet=F)
ncol(Y)
modTS = supSVD(X=scale(ltaTS), Y=as.matrix(Y), r=5, quiet=F)
modTS
summary(Y)
hist(Y)
lines(density(Y))
hist(Y, freq=F)
lines(density(Y))
factTS = factanal(scale(ltaTS), 3)
?factanal
supSVD.analyze(X=scale(ltaTS),Y=as.matrix(Y<0))
supSVD.analyze(X=scale(ltaQC),Y=as.matrix(Y<0))
?lda
library(MASS)
supSVD.analyze(X=scale(ltaQC),Y=as.matrix(Y<0))
k=svd(scale(ltaTS))
k$d
modTS
k$d[1:5]^2
k$d
k$d[1:5]
modTS
supSVD.analyze(X=scale(ltaQC),Y=as.matrix(Y<0))
supSVD.analyze(X=scale(ltaQC),Y=as.matrix(Y<1))
supSVD.analyze(X=scale(ltaQC),Y=as.matrix(Y<2))
supSVD.analyze(X=scale(ltaQC),Y=as.matrix(Y<0))
supSVD.analyze(X=scale(ltaQC),Y=as.matrix(Y<1))
Y
library(leaps)
ltaTS1 = cbind(ltaTS,Y)
bestsets = regsubsets(Y~., data=ltaTS1, nbest=5)
bestsets = regsubsets(Y~ltaTS1[,1:5], data=ltaTS1, nbest=5)
ltaTS1 = cbind(ltaTS[,1:70],Y)
bestsets = regsubsets(Y~ltaTS1[,1:5], data=ltaTS1, nbest=5)
bestsets = regsubsets(Y~., data=ltaTS1, nbest=5)
?regsubsets
bestsets = regsubsets(Y~., data=ltaTS1, nbest=5, really.big=T)
bestsets
class(bestsets)
as.matrix(bestsets)
bestsets[,1]
summary(bestsets)
as.matrix(summary(bestsets))
